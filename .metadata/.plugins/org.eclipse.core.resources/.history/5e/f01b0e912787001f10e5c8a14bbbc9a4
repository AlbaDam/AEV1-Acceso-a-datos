package Evaluable1;

import java.awt.BorderLayout;
import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import java.awt.Color;
import javax.swing.border.LineBorder;
import javax.swing.JLabel;
import java.awt.Font;
import javax.swing.JTextField;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JFileChooser;
import javax.swing.JTextArea;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.io.*;
import java.nio.charset.StandardCharsets;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JScrollPane;

public class Vista extends JFrame {

	private static final long serialVersionUID = 1L;
	private JPanel contentPane;
	private JTextField txtDirectori;
	private JTextField txtParaula;
	private JTextField txtReemplaçar;
	private JTextArea txtAreaResultats;
	private JButton btnDirectori;
	private JButton btnParaula;
	private JButton btnReemplaçar;
	private JCheckBox chkAccents;
	private JCheckBox chkMayusMinus;
	
	
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					Vista frame = new Vista();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	 private void seleccionarDirectori() {
		 JFileChooser fileChooser = new JFileChooser();
	     fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
	     int resultat = fileChooser.showOpenDialog(this);

	     if (resultat == JFileChooser.APPROVE_OPTION) {
	    	 File directoriSeleccionat = fileChooser.getSelectedFile();
	         txtDirectori.setText(directoriSeleccionat.getAbsolutePath());
	        }
	    }
	
	
	   private void llistarArbreFitxers(File directori, String prefix, String subPrefix) {
	        File[] fitxers = directori.listFiles();

	        if (fitxers != null && fitxers.length > 0) {
	            for (int i = 0; i < fitxers.length; i++) {
	                File fitxer = fitxers[i];
	                boolean esUltim = (i == fitxers.length - 1);

	                if (fitxer.isDirectory()) {
	                    txtAreaResultats.append(prefix + (esUltim ? "|-- " : "|-- ") + fitxer.getName() + "\n");
	                    llistarArbreFitxers(fitxer, subPrefix + (esUltim ? "    " : "|   "), subPrefix + (esUltim ? "    " : "|   "));
	                } else {
	                    mostrarInformacioFitxer(fitxer, prefix + (esUltim ? "|-- " : "|-- "));
	                }
	            }
	        }
	    }
	
	
	   private void mostrarInformacioFitxer(File fitxer, String prefix) {
	        String nomFitxer = fitxer.getName();
	        String extensio = obtenirExtensio(fitxer);
	        double grandaria = fitxer.length()/1024.0;
	        String ultimaModificacio = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss").format(new Date(fitxer.lastModified()));	
	        txtAreaResultats.append(prefix + nomFitxer + " (" + String.format("%.2f", grandaria) + " KB – " + ultimaModificacio + ")\n");
	    }

	   private String obtenirExtensio(File fitxer) {
	        String nomFitxer = fitxer.getName();
	        int index = nomFitxer.lastIndexOf(".");
	        if (index > 0 && index < nomFitxer.length() - 1) {
	            return nomFitxer.substring(index + 1);
	        }
	        return "Sense extensió";
	    }
	   
	   
	   private void buscarParaulaEnFitxers(File directori, String paraula) {
		    File[] fitxers = directori.listFiles();

		    if (fitxers != null) {
		        for (File fitxer : fitxers) {
		            if (fitxer.isDirectory()) {
		                buscarParaulaEnFitxers(fitxer, paraula);
		            } else {
		                mostrarConcidenciesParaula(fitxer, paraula);
		            }
		        }
		    }
		}

	   
	   private void mostrarConcidenciesParaula(File fitxer, String paraula) {
		    String extensio = obtenirExtensio(fitxer);
		    int contador = 0;

		    if (extensio.equals("txt")) {
		        try {
		        	FileReader fr = new FileReader(fitxer);
		        	BufferedReader br = new BufferedReader(fr);
		        	String linea = br.readLine();
		            while (linea != null) {
		            	int indice = linea.indexOf(paraula);
						 while(indice != -1) {
							 contador++;
							 indice = linea.indexOf(paraula, indice +1);
						 	}
						 linea = br.readLine();
					 }
		        } catch (IOException e) {
		            txtAreaResultats.append("Error llegint el fitxer: " + fitxer.getName() + "\n");
		        	}
		        	
		        txtAreaResultats.append(fitxer.getName() + " (" + contador + " coincidències)\n");
		    }
	   }
		    
		    
	
	   
		private int comptarParaula(String linia, String paraula) {
		    int count = 0;
		    int index = 0;

		    if (!chkMayusMinus.isSelected()) {
		        linia = linia.toLowerCase();
		        paraula = paraula.toLowerCase();
		    }

		    while ((index = linia.indexOf(paraula, index)) != -1) {
		        count++;
		        index += paraula.length();
		    }

		    return count;
		}
	
	
	/**
	 * Create the frame.
	 */
	public Vista() {
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 1139, 780);
		contentPane = new JPanel();
		contentPane.setBackground(new Color(241, 233, 241));
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));

		setContentPane(contentPane);
		contentPane.setLayout(null);
		
		JPanel panel = new JPanel();
		panel.setBorder(new LineBorder(new Color(0, 0, 0), 2));
		panel.setBackground(new Color(186, 146, 184));
		panel.setBounds(10, 10, 1105, 145);
		contentPane.add(panel);
		panel.setLayout(null);
		
		JLabel lblTitol = new JLabel("Gestió de fitxers");
		lblTitol.setBounds(381, 44, 329, 51);
		lblTitol.setFont(new Font("Valken", Font.PLAIN, 40));
		panel.add(lblTitol);
		
		txtDirectori = new JTextField();
		txtDirectori.setFont(new Font("Trebuchet MS", Font.PLAIN, 20));
		txtDirectori.setBounds(10, 283, 238, 39);
		contentPane.add(txtDirectori);
		txtDirectori.setColumns(10);
		
		btnDirectori = new JButton("Buscar directori");
		btnDirectori.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				 seleccionarDirectori();
				 File directoriSeleccionat = new File(txtDirectori.getText());
				 txtAreaResultats.setText("");
				 
				 if (directoriSeleccionat.exists() && directoriSeleccionat.isDirectory()) {
			            llistarArbreFitxers(directoriSeleccionat, "", ""); 
			        } else {
			            txtAreaResultats.append("Directori no vàlid.\n");
			        }
			}
		});
		btnDirectori.setBackground(new Color(153, 255, 204));
		btnDirectori.setFont(new Font("Tahoma", Font.PLAIN, 20));
		btnDirectori.setBounds(284, 282, 185, 39);
		contentPane.add(btnDirectori);
		
		txtParaula = new JTextField();
		txtParaula.setFont(new Font("Trebuchet MS", Font.PLAIN, 20));
		txtParaula.setColumns(10);
		txtParaula.setBounds(10, 398, 238, 39);
		contentPane.add(txtParaula);
		
		btnParaula = new JButton("Buscar paraula");
		btnParaula.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				String paraula = txtParaula.getText();
		        File directoriSeleccionat = new File(txtDirectori.getText());
		        
		        if (directoriSeleccionat.exists() && directoriSeleccionat.isDirectory()) {
		            txtAreaResultats.setText("");
		            buscarParaulaEnFitxers(directoriSeleccionat, paraula);
		        } else {
		            txtAreaResultats.append("Directori no vàlid.\n");
		        }
			}
		});
		btnParaula.setBackground(new Color(153, 153, 255));
		btnParaula.setFont(new Font("Tahoma", Font.PLAIN, 20));
		btnParaula.setBounds(284, 397, 185, 39);
		contentPane.add(btnParaula);
		
		chkMayusMinus = new JCheckBox("Majúscules/Minúscules");
		chkMayusMinus.setFont(new Font("Tahoma", Font.PLAIN, 20));
		chkMayusMinus.setBounds(10, 474, 231, 39);
		contentPane.add(chkMayusMinus);
		
		txtAreaResultats = new JTextArea();
		txtAreaResultats.setEditable(false);
		txtAreaResultats.setFont(new Font("Trebuchet MS", Font.PLAIN, 14));
		txtAreaResultats.setBounds(533, 178, 582, 555);
		contentPane.add(txtAreaResultats);
		
		chkAccents = new JCheckBox("Accents");
		chkAccents.setFont(new Font("Tahoma", Font.PLAIN, 20));
		chkAccents.setBounds(10, 541, 106, 39);
		contentPane.add(chkAccents);
		
		txtReemplaçar = new JTextField();
		txtReemplaçar.setFont(new Font("Trebuchet MS", Font.PLAIN, 20));
		txtReemplaçar.setColumns(10);
		txtReemplaçar.setBounds(10, 644, 185, 39);
		contentPane.add(txtReemplaçar);
		
		btnReemplaçar = new JButton("Reemplaçar paraula");
		btnReemplaçar.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				
			}
		});
		btnReemplaçar.setBackground(new Color(255, 153, 102));
		btnReemplaçar.setFont(new Font("Tahoma", Font.PLAIN, 20));
		btnReemplaçar.setBounds(231, 643, 238, 39);
		contentPane.add(btnReemplaçar);
	}
}
